[tool.poetry]
name = "obsidian-github-formatter"
version = "0.1.0"
description = "Utility tool to reformat markdown files of an Obsidian Vault to be naturally readable via GitHub Web."
authors = ["lhaze <github@lhaze.name>"]
license = "MIT License"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.8"
colorama = "^0.4.6"
click = "^8.1.4"

[tool.poetry.group.dev.dependencies]
ipython = "^8.5.0"
pre-commit = "^2.20.0"
pytest = "^7.1.3"
pytest-cov = "^3.0.0"
pdbpp = "^0.10.3"
flake8 = "^5.0.4"
black = { version = "^22.8.0", allow-prereleases = true }

[tool.poetry.scripts]
ogf = 'obsidian_github_formatter.precommit_hook_markdown:main'
ogf-markdown = 'obsidian_github_formatter.markdown:main'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 119
target-version = ["py38", "py39", "py310"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain about missing debug-only code:
  "def __repr__",
  # Don't complain about type-checking guards:
  "TYPE_CHECKING",
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.isort]
profile = "black"
line_length = 119
force_grid_wrap = 2
multi_line_output = 3
atomic = true
include_trailing_comma = true
use_parentheses = true
skip_gitignore = true
src_paths = ["src", "tests"]

[tool.pytest.ini_options]
addopts = "--cov-fail-under=100 --tb=short"
